#version 430

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 1) buffer ssbo_octree { uint b_octree[]; };
uniform int u_max_level;

layout(binding = 2, rgb10_a2ui) uniform uimageBuffer u_voxel_position;
layout(binding = 3, rgba8) uniform imageBuffer u_voxel_color;

uint pack_ui32(vec4 val)
{
	uint res = 0;
	res |= (uint(val.r * 255.0) & 0xffu);
	res |= (uint(val.g * 255.0) & 0xffu) << 8u;
	res |= (uint(val.b * 255.0) & 0xffu) << 16u;
	res |= (uint(val.a * 127.0) & 0x7fu) << 24u;
	return res;
}

void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= imageSize(u_voxel_position))
		return;

	uvec3 position = imageLoad(u_voxel_position, int(id)).rgb;
	vec4 voxel_col = imageLoad(u_voxel_color, int(id));

	uint idx;
	uint addr = 0;
	
	for (int level = 1; level <= u_max_level; level++)
	{
		uint shift = u_max_level - level;
		idx = 0;
		idx |= ((position.x >> shift) & 1u);
		idx |= ((position.y >> shift) & 1u) << 1u;
		idx |= ((position.z >> shift) & 1u) << 2u;

		if (level < u_max_level) {
			addr = b_octree[addr + idx] & 0x7fffffff;
		}
	}

	b_octree[addr + idx] = pack_ui32(voxel_col);
}
